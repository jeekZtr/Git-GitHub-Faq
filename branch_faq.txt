测试分支切换和合并的操作
master 分支 , dev 分支

分支操作流程

版本号管理 和 标签管理

0.0.0 格式的

生产bug修改完成后, master分支增加 一个版本号 例如 1.2.1 --> 1.2.2
release 版本发布到 master后, master分支 版本增加为  1.3.1 --> 1.3.0
大框架修改后 master分支 版本增加为  1.3.0 --> 2.0.0
 
测试情况有:
1, 怎么创建分支

创建分支: git branch 分支名     
查看所有分支: git branch或者git branch -a
创建并切换分支:git checkout -b 分支名

	什么时候创建分支
		1,开发新功能 feature-x (接到新需求后,新任务)
		2,修改bug时, fixbug-id (修改测试环境)
		3,预发布分支, release-x
	生成bug修改,需创建分支 hotfix-编号 
	
	
	
2,怎么切换分支 

切换分支: git checkout 分支名
	分支文件修改,没有提交 这是切换 分支是什么样的?  是否可以切换, 
	如果可以切换 是否会丢失文件信息
	如果不可切换, 那需要怎样 操作 ?


	#(已提交文件,提交过的文件)master分支修改文件后(未提交), 提示不能切换分支
		git stash 和  git commit 来出来这个问题
		git stash apply 恢复保存的数据
		git stash list
		git stash apply stash@{0}  你只要修改{}里的标识符(数字)即可！
		
	#(新创建文件,没有和git关联) 切换分支, 新建文件会出现在 切换到的分支里
	
3, 怎么同步分支 (因为开发中 其他人员已经提交了很多东西) 
	
	同步他人提交的代码:
		$ git fetch origin  #? 相当于 从远程获取最新版本到本地不会自动合并(merge)
		$ git rebase origin/master # 把本地master分支的commit保存,然后从服务更新代码,然后把本地commit依次加上
	
	git pull 不能使用为什么?
		相当于是从远程获取最新版本并merge到本地
		
		git fetch origin master
		git log -a master..origin/master
		git merge origin/master
		-----------------------------------
		git fetch origin master:tmp
		git diff tmp
		git merge tmp
		-----------------------------------
		git pull origin master
		
	
	怎么提交分支(服务器仓库中自己的分支)	
		开发功能的分支,提交到dev分支时,本地可能已经commit跟多次, 造成log很多,以后版本处理不好控制, 需要使用 git rebase -i  命令合并分支
		
	feature分支怎么 同步dev 的分支的数据? 不同分支的数据相互同步(这就是merge?)
		在一个分支拿去另外分支的commit (只获得该次 commit内容),需要使用 cherry-pick命令, 例如:  git cherry-pick  分支号   //这个是从需要拿取commit的分支 git log 看到的

4, 怎么合并分支
 
	
	git merge --no-ff -m "合并的信息(TAG)" develop
	
	合并分支后,怎么删除 合并的内容

5, 怎么处理冲突
	

6, 怎么删除分支

	git branch -d 分支名
	
	
7.恢复误删分支	
	git log --branches="被删的分支名"
	git branch develop 版本id (取前七位即可)
8, 怎么提交到服务器
 
   
   git push 远程服务器地址 分支名称
   
   ----------------
   git branch -vv   --查看本地分支和远程分支的关联关系

9, 怎么删除提交
	
	合并分支A 后,又经过几次合并分别合并了 B,C,D,怎么删除 A的提交 ?
	--------
	git revert <commit> 
	通过提交一次新的内容,抵消 commit 提交的代码
	
	
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------	
---有冲突后, 需要用continue 参数的命令

git rebase --continue # 加上--continue参数让rebase继续处理
	
	
===================================
日志输出参数

命令示例：

git log --oneline --graph

也许你用过git log。它支持很多命令行参数，将这些参数结合起来使用，功能尤为强大。下面是我经常使用的一些参数：

–author=“Alex Kras” ——只显示某个用户的提交任务–name-only ——只显示变更文件的名称–oneline——将提交信息压缩到一行显示–graph ——显示所有提交的依赖树–reverse ——按照逆序显示提交记录（最先提交的在最前面）–after ——显示某个日期之后发生的提交–before ——显示发生某个日期之前的提交

例如，曾经有位主管要求在每周五提交周报。所以我每周五都运行一下这个指令： git log --author="Alex Kras"
 --after="1 week ago" --oneline，然后将输出结果编辑一下，发送给主管审核。

Git有很多命令行参数，使用起来非常方便。运行 man git log ，来看一下这些参数的作用。

如果这些都不好用，git还有一个 --pretty 参数，可以用来创建高级自定义输出。

---------------------

本文来自 sgnoquiter 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/sgnoquiter/article/details/50385389?utm_source=copy 
===================================
--no-ff指的是强行关闭fast-forward方式。

fast-forward方式就是当条件允许的时候，git直接把HEAD指针指向合并分支的头，完成合并。属于“快进方式”，不过这种情况如果删除分支，则会丢失分支信息。因为在这个过程中没有创建commit

git merge --squash 是用来把一些不必要commit进行压缩，比如说，你的feature在开发的时候写的commit很乱，那么我们合并的时候不希望把这些历史commit带过来，于是使用--squash进行合并，此时文件已经同合并后一样了，但不移动HEAD，不提交。需要进行一次额外的commit来“总结”一下，然后完成最终的合并。

总结：--no-ff：不使用fast-forward方式合并，保留分支的commit历史--squash：使用squash方式合并，把多次分支commit历史压缩为一次



---------------------

本文来自 small豆子 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/trackcode/article/details/51536511?utm_source=copy 
